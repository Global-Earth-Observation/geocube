// Code generated by "enumer -json -sql -type Compression -trimprefix Compression"; DO NOT EDIT.

//
package geocube

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
)

const _CompressionName = "NOLOSSLESSLOSSY"

var _CompressionIndex = [...]uint8{0, 2, 10, 15}

func (i Compression) String() string {
	if i < 0 || i >= Compression(len(_CompressionIndex)-1) {
		return fmt.Sprintf("Compression(%d)", i)
	}
	return _CompressionName[_CompressionIndex[i]:_CompressionIndex[i+1]]
}

var _CompressionValues = []Compression{0, 1, 2}

var _CompressionNameToValueMap = map[string]Compression{
	_CompressionName[0:2]:   0,
	_CompressionName[2:10]:  1,
	_CompressionName[10:15]: 2,
}

// CompressionString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CompressionString(s string) (Compression, error) {
	if val, ok := _CompressionNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Compression values", s)
}

// CompressionValues returns all values of the enum
func CompressionValues() []Compression {
	return _CompressionValues
}

// IsACompression returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Compression) IsACompression() bool {
	for _, v := range _CompressionValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Compression
func (i Compression) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Compression
func (i *Compression) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Compression should be a string, got %s", data)
	}

	var err error
	*i, err = CompressionString(s)
	return err
}

func (i Compression) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *Compression) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	str, ok := value.(string)
	if !ok {
		bytes, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := CompressionString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
