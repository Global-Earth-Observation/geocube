// Code generated by "enumer -json -sql -type DType -trimprefix DType"; DO NOT EDIT.

//
package geocube

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
)

const _DTypeName = "UNDEFINEDUINT8UINT16UINT32INT8INT16INT32FLOAT32FLOAT64COMPLEX64"

var _DTypeIndex = [...]uint8{0, 9, 14, 20, 26, 30, 35, 40, 47, 54, 63}

func (i DType) String() string {
	if i < 0 || i >= DType(len(_DTypeIndex)-1) {
		return fmt.Sprintf("DType(%d)", i)
	}
	return _DTypeName[_DTypeIndex[i]:_DTypeIndex[i+1]]
}

var _DTypeValues = []DType{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}

var _DTypeNameToValueMap = map[string]DType{
	_DTypeName[0:9]:   0,
	_DTypeName[9:14]:  1,
	_DTypeName[14:20]: 2,
	_DTypeName[20:26]: 3,
	_DTypeName[26:30]: 4,
	_DTypeName[30:35]: 5,
	_DTypeName[35:40]: 6,
	_DTypeName[40:47]: 7,
	_DTypeName[47:54]: 8,
	_DTypeName[54:63]: 9,
}

// DTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func DTypeString(s string) (DType, error) {
	if val, ok := _DTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to DType values", s)
}

// DTypeValues returns all values of the enum
func DTypeValues() []DType {
	return _DTypeValues
}

// IsADType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i DType) IsADType() bool {
	for _, v := range _DTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for DType
func (i DType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for DType
func (i *DType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("DType should be a string, got %s", data)
	}

	var err error
	*i, err = DTypeString(s)
	return err
}

func (i DType) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *DType) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	str, ok := value.(string)
	if !ok {
		bytes, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := DTypeString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
