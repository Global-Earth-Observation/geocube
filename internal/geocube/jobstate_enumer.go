// Code generated by "enumer -json -sql -type JobState -trimprefix JobState"; DO NOT EDIT.

package geocube

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _JobStateName = "NEWCREATEDCONSOLIDATIONINPROGRESSCONSOLIDATIONDONECONSOLIDATIONINDEXEDCONSOLIDATIONEFFECTIVECONSOLIDATIONFAILEDCONSOLIDATIONRETRYINGCONSOLIDATIONCANCELLINGDELETIONINPROGRESSDELETIONEFFECTIVEDELETIONFAILEDDONEFAILEDINITIALISATIONFAILEDCANCELLATIONFAILEDABORTEDROLLBACKFAILEDDONEBUTUNTIDY"

var _JobStateIndex = [...]uint16{0, 3, 10, 33, 50, 70, 92, 111, 132, 155, 173, 190, 204, 208, 214, 234, 252, 259, 273, 286}

const _JobStateLowerName = "newcreatedconsolidationinprogressconsolidationdoneconsolidationindexedconsolidationeffectiveconsolidationfailedconsolidationretryingconsolidationcancellingdeletioninprogressdeletioneffectivedeletionfaileddonefailedinitialisationfailedcancellationfailedabortedrollbackfaileddonebutuntidy"

func (i JobState) String() string {
	if i < 0 || i >= JobState(len(_JobStateIndex)-1) {
		return fmt.Sprintf("JobState(%d)", i)
	}
	return _JobStateName[_JobStateIndex[i]:_JobStateIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _JobStateNoOp() {
	var x [1]struct{}
	_ = x[JobStateNEW-(0)]
	_ = x[JobStateCREATED-(1)]
	_ = x[JobStateCONSOLIDATIONINPROGRESS-(2)]
	_ = x[JobStateCONSOLIDATIONDONE-(3)]
	_ = x[JobStateCONSOLIDATIONINDEXED-(4)]
	_ = x[JobStateCONSOLIDATIONEFFECTIVE-(5)]
	_ = x[JobStateCONSOLIDATIONFAILED-(6)]
	_ = x[JobStateCONSOLIDATIONRETRYING-(7)]
	_ = x[JobStateCONSOLIDATIONCANCELLING-(8)]
	_ = x[JobStateDELETIONINPROGRESS-(9)]
	_ = x[JobStateDELETIONEFFECTIVE-(10)]
	_ = x[JobStateDELETIONFAILED-(11)]
	_ = x[JobStateDONE-(12)]
	_ = x[JobStateFAILED-(13)]
	_ = x[JobStateINITIALISATIONFAILED-(14)]
	_ = x[JobStateCANCELLATIONFAILED-(15)]
	_ = x[JobStateABORTED-(16)]
	_ = x[JobStateROLLBACKFAILED-(17)]
	_ = x[JobStateDONEBUTUNTIDY-(18)]
}

var _JobStateValues = []JobState{JobStateNEW, JobStateCREATED, JobStateCONSOLIDATIONINPROGRESS, JobStateCONSOLIDATIONDONE, JobStateCONSOLIDATIONINDEXED, JobStateCONSOLIDATIONEFFECTIVE, JobStateCONSOLIDATIONFAILED, JobStateCONSOLIDATIONRETRYING, JobStateCONSOLIDATIONCANCELLING, JobStateDELETIONINPROGRESS, JobStateDELETIONEFFECTIVE, JobStateDELETIONFAILED, JobStateDONE, JobStateFAILED, JobStateINITIALISATIONFAILED, JobStateCANCELLATIONFAILED, JobStateABORTED, JobStateROLLBACKFAILED, JobStateDONEBUTUNTIDY}

var _JobStateNameToValueMap = map[string]JobState{
	_JobStateName[0:3]:          JobStateNEW,
	_JobStateLowerName[0:3]:     JobStateNEW,
	_JobStateName[3:10]:         JobStateCREATED,
	_JobStateLowerName[3:10]:    JobStateCREATED,
	_JobStateName[10:33]:        JobStateCONSOLIDATIONINPROGRESS,
	_JobStateLowerName[10:33]:   JobStateCONSOLIDATIONINPROGRESS,
	_JobStateName[33:50]:        JobStateCONSOLIDATIONDONE,
	_JobStateLowerName[33:50]:   JobStateCONSOLIDATIONDONE,
	_JobStateName[50:70]:        JobStateCONSOLIDATIONINDEXED,
	_JobStateLowerName[50:70]:   JobStateCONSOLIDATIONINDEXED,
	_JobStateName[70:92]:        JobStateCONSOLIDATIONEFFECTIVE,
	_JobStateLowerName[70:92]:   JobStateCONSOLIDATIONEFFECTIVE,
	_JobStateName[92:111]:       JobStateCONSOLIDATIONFAILED,
	_JobStateLowerName[92:111]:  JobStateCONSOLIDATIONFAILED,
	_JobStateName[111:132]:      JobStateCONSOLIDATIONRETRYING,
	_JobStateLowerName[111:132]: JobStateCONSOLIDATIONRETRYING,
	_JobStateName[132:155]:      JobStateCONSOLIDATIONCANCELLING,
	_JobStateLowerName[132:155]: JobStateCONSOLIDATIONCANCELLING,
	_JobStateName[155:173]:      JobStateDELETIONINPROGRESS,
	_JobStateLowerName[155:173]: JobStateDELETIONINPROGRESS,
	_JobStateName[173:190]:      JobStateDELETIONEFFECTIVE,
	_JobStateLowerName[173:190]: JobStateDELETIONEFFECTIVE,
	_JobStateName[190:204]:      JobStateDELETIONFAILED,
	_JobStateLowerName[190:204]: JobStateDELETIONFAILED,
	_JobStateName[204:208]:      JobStateDONE,
	_JobStateLowerName[204:208]: JobStateDONE,
	_JobStateName[208:214]:      JobStateFAILED,
	_JobStateLowerName[208:214]: JobStateFAILED,
	_JobStateName[214:234]:      JobStateINITIALISATIONFAILED,
	_JobStateLowerName[214:234]: JobStateINITIALISATIONFAILED,
	_JobStateName[234:252]:      JobStateCANCELLATIONFAILED,
	_JobStateLowerName[234:252]: JobStateCANCELLATIONFAILED,
	_JobStateName[252:259]:      JobStateABORTED,
	_JobStateLowerName[252:259]: JobStateABORTED,
	_JobStateName[259:273]:      JobStateROLLBACKFAILED,
	_JobStateLowerName[259:273]: JobStateROLLBACKFAILED,
	_JobStateName[273:286]:      JobStateDONEBUTUNTIDY,
	_JobStateLowerName[273:286]: JobStateDONEBUTUNTIDY,
}

var _JobStateNames = []string{
	_JobStateName[0:3],
	_JobStateName[3:10],
	_JobStateName[10:33],
	_JobStateName[33:50],
	_JobStateName[50:70],
	_JobStateName[70:92],
	_JobStateName[92:111],
	_JobStateName[111:132],
	_JobStateName[132:155],
	_JobStateName[155:173],
	_JobStateName[173:190],
	_JobStateName[190:204],
	_JobStateName[204:208],
	_JobStateName[208:214],
	_JobStateName[214:234],
	_JobStateName[234:252],
	_JobStateName[252:259],
	_JobStateName[259:273],
	_JobStateName[273:286],
}

// JobStateString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func JobStateString(s string) (JobState, error) {
	if val, ok := _JobStateNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _JobStateNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to JobState values", s)
}

// JobStateValues returns all values of the enum
func JobStateValues() []JobState {
	return _JobStateValues
}

// JobStateStrings returns a slice of all String values of the enum
func JobStateStrings() []string {
	strs := make([]string, len(_JobStateNames))
	copy(strs, _JobStateNames)
	return strs
}

// IsAJobState returns "true" if the value is listed in the enum definition. "false" otherwise
func (i JobState) IsAJobState() bool {
	for _, v := range _JobStateValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for JobState
func (i JobState) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for JobState
func (i *JobState) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("JobState should be a string, got %s", data)
	}

	var err error
	*i, err = JobStateString(s)
	return err
}

func (i JobState) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *JobState) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of JobState: %[1]T(%[1]v)", value)
	}

	val, err := JobStateString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
