// Code generated by "enumer -json -sql -type StorageClass -trimprefix StorageClass"; DO NOT EDIT.

//
package geocube

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
)

const _StorageClassName = "STANDARDINFREQUENTARCHIVEDEEPARCHIVEUNDEFINED"

var _StorageClassIndex = [...]uint8{0, 8, 18, 25, 36, 45}

func (i StorageClass) String() string {
	if i < 0 || i >= StorageClass(len(_StorageClassIndex)-1) {
		return fmt.Sprintf("StorageClass(%d)", i)
	}
	return _StorageClassName[_StorageClassIndex[i]:_StorageClassIndex[i+1]]
}

var _StorageClassValues = []StorageClass{0, 1, 2, 3, 4}

var _StorageClassNameToValueMap = map[string]StorageClass{
	_StorageClassName[0:8]:   0,
	_StorageClassName[8:18]:  1,
	_StorageClassName[18:25]: 2,
	_StorageClassName[25:36]: 3,
	_StorageClassName[36:45]: 4,
}

// StorageClassString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func StorageClassString(s string) (StorageClass, error) {
	if val, ok := _StorageClassNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to StorageClass values", s)
}

// StorageClassValues returns all values of the enum
func StorageClassValues() []StorageClass {
	return _StorageClassValues
}

// IsAStorageClass returns "true" if the value is listed in the enum definition. "false" otherwise
func (i StorageClass) IsAStorageClass() bool {
	for _, v := range _StorageClassValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for StorageClass
func (i StorageClass) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for StorageClass
func (i *StorageClass) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("StorageClass should be a string, got %s", data)
	}

	var err error
	*i, err = StorageClassString(s)
	return err
}

func (i StorageClass) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *StorageClass) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	str, ok := value.(string)
	if !ok {
		bytes, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := StorageClassString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
