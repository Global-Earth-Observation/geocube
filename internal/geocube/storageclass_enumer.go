// Code generated by "enumer -json -sql -type StorageClass -trimprefix StorageClass"; DO NOT EDIT.

package geocube

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _StorageClassName = "STANDARDINFREQUENTARCHIVEDEEPARCHIVEUNDEFINED"

var _StorageClassIndex = [...]uint8{0, 8, 18, 25, 36, 45}

const _StorageClassLowerName = "standardinfrequentarchivedeeparchiveundefined"

func (i StorageClass) String() string {
	if i < 0 || i >= StorageClass(len(_StorageClassIndex)-1) {
		return fmt.Sprintf("StorageClass(%d)", i)
	}
	return _StorageClassName[_StorageClassIndex[i]:_StorageClassIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _StorageClassNoOp() {
	var x [1]struct{}
	_ = x[StorageClassSTANDARD-(0)]
	_ = x[StorageClassINFREQUENT-(1)]
	_ = x[StorageClassARCHIVE-(2)]
	_ = x[StorageClassDEEPARCHIVE-(3)]
	_ = x[StorageClassUNDEFINED-(4)]
}

var _StorageClassValues = []StorageClass{StorageClassSTANDARD, StorageClassINFREQUENT, StorageClassARCHIVE, StorageClassDEEPARCHIVE, StorageClassUNDEFINED}

var _StorageClassNameToValueMap = map[string]StorageClass{
	_StorageClassName[0:8]:        StorageClassSTANDARD,
	_StorageClassLowerName[0:8]:   StorageClassSTANDARD,
	_StorageClassName[8:18]:       StorageClassINFREQUENT,
	_StorageClassLowerName[8:18]:  StorageClassINFREQUENT,
	_StorageClassName[18:25]:      StorageClassARCHIVE,
	_StorageClassLowerName[18:25]: StorageClassARCHIVE,
	_StorageClassName[25:36]:      StorageClassDEEPARCHIVE,
	_StorageClassLowerName[25:36]: StorageClassDEEPARCHIVE,
	_StorageClassName[36:45]:      StorageClassUNDEFINED,
	_StorageClassLowerName[36:45]: StorageClassUNDEFINED,
}

var _StorageClassNames = []string{
	_StorageClassName[0:8],
	_StorageClassName[8:18],
	_StorageClassName[18:25],
	_StorageClassName[25:36],
	_StorageClassName[36:45],
}

// StorageClassString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func StorageClassString(s string) (StorageClass, error) {
	if val, ok := _StorageClassNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _StorageClassNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to StorageClass values", s)
}

// StorageClassValues returns all values of the enum
func StorageClassValues() []StorageClass {
	return _StorageClassValues
}

// StorageClassStrings returns a slice of all String values of the enum
func StorageClassStrings() []string {
	strs := make([]string, len(_StorageClassNames))
	copy(strs, _StorageClassNames)
	return strs
}

// IsAStorageClass returns "true" if the value is listed in the enum definition. "false" otherwise
func (i StorageClass) IsAStorageClass() bool {
	for _, v := range _StorageClassValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for StorageClass
func (i StorageClass) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for StorageClass
func (i *StorageClass) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("StorageClass should be a string, got %s", data)
	}

	var err error
	*i, err = StorageClassString(s)
	return err
}

func (i StorageClass) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *StorageClass) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of StorageClass: %[1]T(%[1]v)", value)
	}

	val, err := StorageClassString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
