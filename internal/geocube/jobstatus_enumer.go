// Code generated by "enumer -json -sql -type JobStatus"; DO NOT EDIT.

//
package geocube

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
)

const _JobStatusName = "JobCreatedOrdersPreparedPrepareOrdersFailedSendOrdersFailedConsolidationDoneConsolidationFailedConsolidationRetryFailedConsolidationIndexedConsolidationIndexingFailedDatasetsSwappedSwapDatasetsFailedDeletionStartedStartDeletionFailedDeletionReadyDeletionNotReadyRemovalDoneDeletionDoneRemovalFailedDeletionFailedCancelledByUserCancelledByUserForcedCancellationFailedCancellationDoneRollbackFailedRollbackDoneRetriedRetryForcedContinue"

var _JobStatusIndex = [...]uint16{0, 10, 24, 43, 59, 76, 95, 119, 139, 166, 181, 199, 214, 233, 246, 262, 273, 285, 298, 312, 327, 348, 366, 382, 396, 408, 415, 426, 434}

func (i JobStatus) String() string {
	if i < 0 || i >= JobStatus(len(_JobStatusIndex)-1) {
		return fmt.Sprintf("JobStatus(%d)", i)
	}
	return _JobStatusName[_JobStatusIndex[i]:_JobStatusIndex[i+1]]
}

var _JobStatusValues = []JobStatus{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27}

var _JobStatusNameToValueMap = map[string]JobStatus{
	_JobStatusName[0:10]:    0,
	_JobStatusName[10:24]:   1,
	_JobStatusName[24:43]:   2,
	_JobStatusName[43:59]:   3,
	_JobStatusName[59:76]:   4,
	_JobStatusName[76:95]:   5,
	_JobStatusName[95:119]:  6,
	_JobStatusName[119:139]: 7,
	_JobStatusName[139:166]: 8,
	_JobStatusName[166:181]: 9,
	_JobStatusName[181:199]: 10,
	_JobStatusName[199:214]: 11,
	_JobStatusName[214:233]: 12,
	_JobStatusName[233:246]: 13,
	_JobStatusName[246:262]: 14,
	_JobStatusName[262:273]: 15,
	_JobStatusName[273:285]: 16,
	_JobStatusName[285:298]: 17,
	_JobStatusName[298:312]: 18,
	_JobStatusName[312:327]: 19,
	_JobStatusName[327:348]: 20,
	_JobStatusName[348:366]: 21,
	_JobStatusName[366:382]: 22,
	_JobStatusName[382:396]: 23,
	_JobStatusName[396:408]: 24,
	_JobStatusName[408:415]: 25,
	_JobStatusName[415:426]: 26,
	_JobStatusName[426:434]: 27,
}

// JobStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func JobStatusString(s string) (JobStatus, error) {
	if val, ok := _JobStatusNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to JobStatus values", s)
}

// JobStatusValues returns all values of the enum
func JobStatusValues() []JobStatus {
	return _JobStatusValues
}

// IsAJobStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i JobStatus) IsAJobStatus() bool {
	for _, v := range _JobStatusValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for JobStatus
func (i JobStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for JobStatus
func (i *JobStatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("JobStatus should be a string, got %s", data)
	}

	var err error
	*i, err = JobStatusString(s)
	return err
}

func (i JobStatus) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *JobStatus) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	str, ok := value.(string)
	if !ok {
		bytes, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := JobStatusString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
