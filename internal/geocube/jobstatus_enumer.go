// Code generated by "enumer -json -sql -type JobStatus"; DO NOT EDIT.

//
package geocube

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
)

const _JobStatusName = "JobCreatedConsolidationOrdersPreparedPrepareConsolidationOrdersFailedSendConsolidationOrdersFailedConsolidationDoneConsolidationFailedConsolidationRetryFailedConsolidationIndexedConsolidationIndexingFailedDatasetsSwappedSwapDatasetsFailedDeletionOrdersSentSendDeletionOrdersFailedDeletionDoneDeletionFailedCancelledByUserCancelledByUserForcedCancellationFailedCancellationDoneRollbackFailedRollbackDoneRetriedRetryForcedContinue"

var _JobStatusIndex = [...]uint16{0, 10, 37, 69, 98, 115, 134, 158, 178, 205, 220, 238, 256, 280, 292, 306, 321, 342, 360, 376, 390, 402, 409, 420, 428}

func (i JobStatus) String() string {
	if i < 0 || i >= JobStatus(len(_JobStatusIndex)-1) {
		return fmt.Sprintf("JobStatus(%d)", i)
	}
	return _JobStatusName[_JobStatusIndex[i]:_JobStatusIndex[i+1]]
}

var _JobStatusValues = []JobStatus{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23}

var _JobStatusNameToValueMap = map[string]JobStatus{
	_JobStatusName[0:10]:    0,
	_JobStatusName[10:37]:   1,
	_JobStatusName[37:69]:   2,
	_JobStatusName[69:98]:   3,
	_JobStatusName[98:115]:  4,
	_JobStatusName[115:134]: 5,
	_JobStatusName[134:158]: 6,
	_JobStatusName[158:178]: 7,
	_JobStatusName[178:205]: 8,
	_JobStatusName[205:220]: 9,
	_JobStatusName[220:238]: 10,
	_JobStatusName[238:256]: 11,
	_JobStatusName[256:280]: 12,
	_JobStatusName[280:292]: 13,
	_JobStatusName[292:306]: 14,
	_JobStatusName[306:321]: 15,
	_JobStatusName[321:342]: 16,
	_JobStatusName[342:360]: 17,
	_JobStatusName[360:376]: 18,
	_JobStatusName[376:390]: 19,
	_JobStatusName[390:402]: 20,
	_JobStatusName[402:409]: 21,
	_JobStatusName[409:420]: 22,
	_JobStatusName[420:428]: 23,
}

// JobStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func JobStatusString(s string) (JobStatus, error) {
	if val, ok := _JobStatusNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to JobStatus values", s)
}

// JobStatusValues returns all values of the enum
func JobStatusValues() []JobStatus {
	return _JobStatusValues
}

// IsAJobStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i JobStatus) IsAJobStatus() bool {
	for _, v := range _JobStatusValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for JobStatus
func (i JobStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for JobStatus
func (i *JobStatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("JobStatus should be a string, got %s", data)
	}

	var err error
	*i, err = JobStatusString(s)
	return err
}

func (i JobStatus) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *JobStatus) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	str, ok := value.(string)
	if !ok {
		bytes, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := JobStatusString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
