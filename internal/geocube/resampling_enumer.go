// Code generated by "enumer -json -sql -type Resampling -trimprefix Resampling"; DO NOT EDIT.

package geocube

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _ResamplingName = "NEARBILINEARCUBICCUBICSPLINELANCZOSAVERAGEMODEMAXMINMEDQ1Q3"

var _ResamplingIndex = [...]uint8{0, 4, 12, 17, 28, 35, 42, 46, 49, 52, 55, 57, 59}

const _ResamplingLowerName = "nearbilinearcubiccubicsplinelanczosaveragemodemaxminmedq1q3"

func (i Resampling) String() string {
	i -= 1
	if i < 0 || i >= Resampling(len(_ResamplingIndex)-1) {
		return fmt.Sprintf("Resampling(%d)", i+1)
	}
	return _ResamplingName[_ResamplingIndex[i]:_ResamplingIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ResamplingNoOp() {
	var x [1]struct{}
	_ = x[ResamplingNEAR-(1)]
	_ = x[ResamplingBILINEAR-(2)]
	_ = x[ResamplingCUBIC-(3)]
	_ = x[ResamplingCUBICSPLINE-(4)]
	_ = x[ResamplingLANCZOS-(5)]
	_ = x[ResamplingAVERAGE-(6)]
	_ = x[ResamplingMODE-(7)]
	_ = x[ResamplingMAX-(8)]
	_ = x[ResamplingMIN-(9)]
	_ = x[ResamplingMED-(10)]
	_ = x[ResamplingQ1-(11)]
	_ = x[ResamplingQ3-(12)]
}

var _ResamplingValues = []Resampling{ResamplingNEAR, ResamplingBILINEAR, ResamplingCUBIC, ResamplingCUBICSPLINE, ResamplingLANCZOS, ResamplingAVERAGE, ResamplingMODE, ResamplingMAX, ResamplingMIN, ResamplingMED, ResamplingQ1, ResamplingQ3}

var _ResamplingNameToValueMap = map[string]Resampling{
	_ResamplingName[0:4]:        ResamplingNEAR,
	_ResamplingLowerName[0:4]:   ResamplingNEAR,
	_ResamplingName[4:12]:       ResamplingBILINEAR,
	_ResamplingLowerName[4:12]:  ResamplingBILINEAR,
	_ResamplingName[12:17]:      ResamplingCUBIC,
	_ResamplingLowerName[12:17]: ResamplingCUBIC,
	_ResamplingName[17:28]:      ResamplingCUBICSPLINE,
	_ResamplingLowerName[17:28]: ResamplingCUBICSPLINE,
	_ResamplingName[28:35]:      ResamplingLANCZOS,
	_ResamplingLowerName[28:35]: ResamplingLANCZOS,
	_ResamplingName[35:42]:      ResamplingAVERAGE,
	_ResamplingLowerName[35:42]: ResamplingAVERAGE,
	_ResamplingName[42:46]:      ResamplingMODE,
	_ResamplingLowerName[42:46]: ResamplingMODE,
	_ResamplingName[46:49]:      ResamplingMAX,
	_ResamplingLowerName[46:49]: ResamplingMAX,
	_ResamplingName[49:52]:      ResamplingMIN,
	_ResamplingLowerName[49:52]: ResamplingMIN,
	_ResamplingName[52:55]:      ResamplingMED,
	_ResamplingLowerName[52:55]: ResamplingMED,
	_ResamplingName[55:57]:      ResamplingQ1,
	_ResamplingLowerName[55:57]: ResamplingQ1,
	_ResamplingName[57:59]:      ResamplingQ3,
	_ResamplingLowerName[57:59]: ResamplingQ3,
}

var _ResamplingNames = []string{
	_ResamplingName[0:4],
	_ResamplingName[4:12],
	_ResamplingName[12:17],
	_ResamplingName[17:28],
	_ResamplingName[28:35],
	_ResamplingName[35:42],
	_ResamplingName[42:46],
	_ResamplingName[46:49],
	_ResamplingName[49:52],
	_ResamplingName[52:55],
	_ResamplingName[55:57],
	_ResamplingName[57:59],
}

// ResamplingString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ResamplingString(s string) (Resampling, error) {
	if val, ok := _ResamplingNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ResamplingNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Resampling values", s)
}

// ResamplingValues returns all values of the enum
func ResamplingValues() []Resampling {
	return _ResamplingValues
}

// ResamplingStrings returns a slice of all String values of the enum
func ResamplingStrings() []string {
	strs := make([]string, len(_ResamplingNames))
	copy(strs, _ResamplingNames)
	return strs
}

// IsAResampling returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Resampling) IsAResampling() bool {
	for _, v := range _ResamplingValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Resampling
func (i Resampling) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Resampling
func (i *Resampling) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Resampling should be a string, got %s", data)
	}

	var err error
	*i, err = ResamplingString(s)
	return err
}

func (i Resampling) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *Resampling) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of Resampling: %[1]T(%[1]v)", value)
	}

	val, err := ResamplingString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
