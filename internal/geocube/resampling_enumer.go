// Code generated by "enumer -json -sql -type Resampling -trimprefix Resampling"; DO NOT EDIT.

//
package geocube

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
)

const _ResamplingName = "NEARBILINEARCUBICCUBICSPLINELANCZOSAVERAGEMODEMAXMINMEDQ1Q3"

var _ResamplingIndex = [...]uint8{0, 4, 12, 17, 28, 35, 42, 46, 49, 52, 55, 57, 59}

func (i Resampling) String() string {
	i -= 1
	if i < 0 || i >= Resampling(len(_ResamplingIndex)-1) {
		return fmt.Sprintf("Resampling(%d)", i+1)
	}
	return _ResamplingName[_ResamplingIndex[i]:_ResamplingIndex[i+1]]
}

var _ResamplingValues = []Resampling{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}

var _ResamplingNameToValueMap = map[string]Resampling{
	_ResamplingName[0:4]:   1,
	_ResamplingName[4:12]:  2,
	_ResamplingName[12:17]: 3,
	_ResamplingName[17:28]: 4,
	_ResamplingName[28:35]: 5,
	_ResamplingName[35:42]: 6,
	_ResamplingName[42:46]: 7,
	_ResamplingName[46:49]: 8,
	_ResamplingName[49:52]: 9,
	_ResamplingName[52:55]: 10,
	_ResamplingName[55:57]: 11,
	_ResamplingName[57:59]: 12,
}

// ResamplingString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ResamplingString(s string) (Resampling, error) {
	if val, ok := _ResamplingNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Resampling values", s)
}

// ResamplingValues returns all values of the enum
func ResamplingValues() []Resampling {
	return _ResamplingValues
}

// IsAResampling returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Resampling) IsAResampling() bool {
	for _, v := range _ResamplingValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Resampling
func (i Resampling) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Resampling
func (i *Resampling) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Resampling should be a string, got %s", data)
	}

	var err error
	*i, err = ResamplingString(s)
	return err
}

func (i Resampling) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *Resampling) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	str, ok := value.(string)
	if !ok {
		bytes, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := ResamplingString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
