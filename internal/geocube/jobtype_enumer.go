// Code generated by "enumer -json -sql -type JobType -trimprefix JobType"; DO NOT EDIT.

package geocube

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _JobTypeName = "CONSOLIDATIONINGESTIONDELETION"

var _JobTypeIndex = [...]uint8{0, 13, 22, 30}

const _JobTypeLowerName = "consolidationingestiondeletion"

func (i JobType) String() string {
	if i < 0 || i >= JobType(len(_JobTypeIndex)-1) {
		return fmt.Sprintf("JobType(%d)", i)
	}
	return _JobTypeName[_JobTypeIndex[i]:_JobTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _JobTypeNoOp() {
	var x [1]struct{}
	_ = x[JobTypeCONSOLIDATION-(0)]
	_ = x[JobTypeINGESTION-(1)]
	_ = x[JobTypeDELETION-(2)]
}

var _JobTypeValues = []JobType{JobTypeCONSOLIDATION, JobTypeINGESTION, JobTypeDELETION}

var _JobTypeNameToValueMap = map[string]JobType{
	_JobTypeName[0:13]:       JobTypeCONSOLIDATION,
	_JobTypeLowerName[0:13]:  JobTypeCONSOLIDATION,
	_JobTypeName[13:22]:      JobTypeINGESTION,
	_JobTypeLowerName[13:22]: JobTypeINGESTION,
	_JobTypeName[22:30]:      JobTypeDELETION,
	_JobTypeLowerName[22:30]: JobTypeDELETION,
}

var _JobTypeNames = []string{
	_JobTypeName[0:13],
	_JobTypeName[13:22],
	_JobTypeName[22:30],
}

// JobTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func JobTypeString(s string) (JobType, error) {
	if val, ok := _JobTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _JobTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to JobType values", s)
}

// JobTypeValues returns all values of the enum
func JobTypeValues() []JobType {
	return _JobTypeValues
}

// JobTypeStrings returns a slice of all String values of the enum
func JobTypeStrings() []string {
	strs := make([]string, len(_JobTypeNames))
	copy(strs, _JobTypeNames)
	return strs
}

// IsAJobType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i JobType) IsAJobType() bool {
	for _, v := range _JobTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for JobType
func (i JobType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for JobType
func (i *JobType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("JobType should be a string, got %s", data)
	}

	var err error
	*i, err = JobTypeString(s)
	return err
}

func (i JobType) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *JobType) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of JobType: %[1]T(%[1]v)", value)
	}

	val, err := JobTypeString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
