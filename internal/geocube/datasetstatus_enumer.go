// Code generated by "enumer -json -sql -type DatasetStatus -trimprefix DatasetStatus"; DO NOT EDIT.

package geocube

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _DatasetStatusName = "ACTIVETODELETEINACTIVE"

var _DatasetStatusIndex = [...]uint8{0, 6, 14, 22}

const _DatasetStatusLowerName = "activetodeleteinactive"

func (i DatasetStatus) String() string {
	if i < 0 || i >= DatasetStatus(len(_DatasetStatusIndex)-1) {
		return fmt.Sprintf("DatasetStatus(%d)", i)
	}
	return _DatasetStatusName[_DatasetStatusIndex[i]:_DatasetStatusIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _DatasetStatusNoOp() {
	var x [1]struct{}
	_ = x[DatasetStatusACTIVE-(0)]
	_ = x[DatasetStatusTODELETE-(1)]
	_ = x[DatasetStatusINACTIVE-(2)]
}

var _DatasetStatusValues = []DatasetStatus{DatasetStatusACTIVE, DatasetStatusTODELETE, DatasetStatusINACTIVE}

var _DatasetStatusNameToValueMap = map[string]DatasetStatus{
	_DatasetStatusName[0:6]:        DatasetStatusACTIVE,
	_DatasetStatusLowerName[0:6]:   DatasetStatusACTIVE,
	_DatasetStatusName[6:14]:       DatasetStatusTODELETE,
	_DatasetStatusLowerName[6:14]:  DatasetStatusTODELETE,
	_DatasetStatusName[14:22]:      DatasetStatusINACTIVE,
	_DatasetStatusLowerName[14:22]: DatasetStatusINACTIVE,
}

var _DatasetStatusNames = []string{
	_DatasetStatusName[0:6],
	_DatasetStatusName[6:14],
	_DatasetStatusName[14:22],
}

// DatasetStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func DatasetStatusString(s string) (DatasetStatus, error) {
	if val, ok := _DatasetStatusNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _DatasetStatusNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to DatasetStatus values", s)
}

// DatasetStatusValues returns all values of the enum
func DatasetStatusValues() []DatasetStatus {
	return _DatasetStatusValues
}

// DatasetStatusStrings returns a slice of all String values of the enum
func DatasetStatusStrings() []string {
	strs := make([]string, len(_DatasetStatusNames))
	copy(strs, _DatasetStatusNames)
	return strs
}

// IsADatasetStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i DatasetStatus) IsADatasetStatus() bool {
	for _, v := range _DatasetStatusValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for DatasetStatus
func (i DatasetStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for DatasetStatus
func (i *DatasetStatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("DatasetStatus should be a string, got %s", data)
	}

	var err error
	*i, err = DatasetStatusString(s)
	return err
}

func (i DatasetStatus) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *DatasetStatus) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of DatasetStatus: %[1]T(%[1]v)", value)
	}

	val, err := DatasetStatusString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
