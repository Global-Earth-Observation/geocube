// Code generated by "enumer -json -sql -type TaskState -trimprefix TaskState"; DO NOT EDIT.

package geocube

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _TaskStateName = "FAILEDCANCELLEDDONEPENDINGNEW"

var _TaskStateIndex = [...]uint8{0, 6, 15, 19, 26, 29}

const _TaskStateLowerName = "failedcancelleddonependingnew"

func (i TaskState) String() string {
	if i < 0 || i >= TaskState(len(_TaskStateIndex)-1) {
		return fmt.Sprintf("TaskState(%d)", i)
	}
	return _TaskStateName[_TaskStateIndex[i]:_TaskStateIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _TaskStateNoOp() {
	var x [1]struct{}
	_ = x[TaskStateFAILED-(0)]
	_ = x[TaskStateCANCELLED-(1)]
	_ = x[TaskStateDONE-(2)]
	_ = x[TaskStatePENDING-(3)]
	_ = x[TaskStateNEW-(4)]
}

var _TaskStateValues = []TaskState{TaskStateFAILED, TaskStateCANCELLED, TaskStateDONE, TaskStatePENDING, TaskStateNEW}

var _TaskStateNameToValueMap = map[string]TaskState{
	_TaskStateName[0:6]:        TaskStateFAILED,
	_TaskStateLowerName[0:6]:   TaskStateFAILED,
	_TaskStateName[6:15]:       TaskStateCANCELLED,
	_TaskStateLowerName[6:15]:  TaskStateCANCELLED,
	_TaskStateName[15:19]:      TaskStateDONE,
	_TaskStateLowerName[15:19]: TaskStateDONE,
	_TaskStateName[19:26]:      TaskStatePENDING,
	_TaskStateLowerName[19:26]: TaskStatePENDING,
	_TaskStateName[26:29]:      TaskStateNEW,
	_TaskStateLowerName[26:29]: TaskStateNEW,
}

var _TaskStateNames = []string{
	_TaskStateName[0:6],
	_TaskStateName[6:15],
	_TaskStateName[15:19],
	_TaskStateName[19:26],
	_TaskStateName[26:29],
}

// TaskStateString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TaskStateString(s string) (TaskState, error) {
	if val, ok := _TaskStateNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _TaskStateNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to TaskState values", s)
}

// TaskStateValues returns all values of the enum
func TaskStateValues() []TaskState {
	return _TaskStateValues
}

// TaskStateStrings returns a slice of all String values of the enum
func TaskStateStrings() []string {
	strs := make([]string, len(_TaskStateNames))
	copy(strs, _TaskStateNames)
	return strs
}

// IsATaskState returns "true" if the value is listed in the enum definition. "false" otherwise
func (i TaskState) IsATaskState() bool {
	for _, v := range _TaskStateValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for TaskState
func (i TaskState) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for TaskState
func (i *TaskState) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("TaskState should be a string, got %s", data)
	}

	var err error
	*i, err = TaskStateString(s)
	return err
}

func (i TaskState) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *TaskState) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of TaskState: %[1]T(%[1]v)", value)
	}

	val, err := TaskStateString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
