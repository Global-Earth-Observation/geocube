syntax = "proto3";
package geocube;
option go_package = "./pb;geocube";

import "google/protobuf/timestamp.proto";


/**
  * Geographic coordinates (4326)
  */
message Coord{
    float lon = 1;
    float lat = 2;
}

/**
  * Geographic linear ring
  */
message LinearRing{
    repeated Coord points = 1;
}

/**
  * Geographic polygon
  */
message Polygon{
    repeated LinearRing linearrings = 1;
}

/**
  * Geographic AOI
  */
message AOI{
    repeated Polygon polygons = 1;
}

/**
  * Record
  */
message Record {
    string                    id     = 1;
    string                    name   = 2;
    google.protobuf.Timestamp time   = 3;
    map<string,string>        tags   = 4;
    string                    aoi_id = 5;
    AOI                       aoi    = 6; // optional
}

/**
  * Structure to create a new record
  */
message NewRecord{
    string                    name   = 1;
    google.protobuf.Timestamp time   = 2;
    map<string,string>        tags   = 3;
    string                    aoi_id = 4;
}

/**
  * List of record ids that are considered separately
  */
  message RecordIdList {
    repeated string ids = 1;
}

/**
  * Records that are considered as a unique, merged record (e.g. all records of a given date, whatever the time of the day)
  */
message GroupedRecords {
    repeated Record records = 1;
}

/**
  * Record ids that are considered as a unique, merged record (e.g. all records of a given date, whatever the time of the day)
  */
message GroupedRecordIds {
    repeated string ids = 1;
}

/**
  * List of groupedRecordIds
  */
message GroupedRecordIdsList {
    repeated GroupedRecordIds records = 1;
}

/**
  * Create new records
  */
message CreateRecordsRequest {
    repeated NewRecord records = 1;
}

/**
  * Returns the ID of the created records 
  */
message CreateRecordsResponse {
    repeated string ids = 1;
}

/**
  * Delete records by ID
  */
message DeleteRecordsRequest {
    repeated string ids = 1;
}

/**
  * Return the number of deleted records
  */
message DeleteRecordsResponse {
    int64 nb = 1;
}

/**
  * Add the given tags to a set of records
  */
message AddRecordsTagsRequest {
    repeated string     ids  = 1;
    map<string, string> tags = 2;
}

/**
  * Returns the number of records impacted by the addition
  */
message AddRecordsTagsResponse {
    int64 nb = 1;
}

/**
  * Remove the given tags for a set of records
  */
message RemoveRecordsTagsRequest {
    repeated string ids = 1;
    repeated string tagsKey = 2;
}

/**
  * Returns the number of records impacted by the removal
  */
message RemoveRecordsTagsResponse {
    int64 nb = 1;
}

/**
  * Create a new AOI
  */
message CreateAOIRequest {
    AOI aoi = 1;
}

/**
  * Returns the ID of the AOI
  */
message CreateAOIResponse {
    string id = 1;
}

/**
  * Request the AOI given its ID
  */
message GetAOIRequest {
    string id = 1;
}

/**
  * Returns a geometric AOI
  */
message GetAOIResponse {
    AOI aoi = 1;
}

/**
  * Request to find the list of records corresponding to multiple filters (inclusive)
  */
message ListRecordsRequest {
    string                    name       = 1; // Name pattern (support * and ? for all or any characters and trailing (?i) for case-insensitiveness)
    map<string, string>       tags       = 3; // cf RecordFilters
    google.protobuf.Timestamp from_time  = 4; // cf RecordFilters
    google.protobuf.Timestamp to_time    = 5; // cf RecordFilters
    AOI                       aoi        = 8; // cf RecordFiltersWithAOI
    int32                     limit      = 6;
    int32                     page       = 7;
    bool                      with_aoi   = 9; // Also returns the AOI (may be big)
    //RecordFiltersWithAOI      filters    = 10;
}

/**
  * 
  */
message ListRecordsResponseItem {
    Record record = 1;
}

/**
  * RecordFilters defines some filters to identify records
  */
message RecordFilters {
    map<string, string>       tags       = 1; // Tags of the records
    google.protobuf.Timestamp from_time  = 2; // Minimum date of the records
    google.protobuf.Timestamp to_time    = 3; // Maximum date of the records
}

/**
  * RecordFiltersWithAOI defines some filters to identify records, including an AOI in geometric coordinates
  */
message RecordFiltersWithAOI {
    RecordFilters filters = 1;
    AOI           aoi     = 2; // Geometric coordinates of an AOI that intersects the AOI of the records
}
