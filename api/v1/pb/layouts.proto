syntax = "proto3";
package geocube;
option go_package = "./pb;geocube";

import "pb/records.proto";

/**
  * Define a size
  */
message Size {
    int32 width  = 1;
    int32 height = 2;
}

/**
  * GDAL GeoTransform
  */
message GeoTransform {
    double a = 1; // x offset
    double b = 2; // x resolution
    double c = 3;
    double d = 4; // y offset
    double e = 5;
    double f = 6; // y resolution
}

/**
  * Define a rectangular tile in a given coordinate system (CRS).
  */
message Tile{
    GeoTransform transform  = 1; // Transform to map from pixel coordinates to CRS
    Size         size_px    = 2; // Size of the tile in pixel
    string       crs        = 3; // Coordinate reference system
}

/**
  * Define a layout for consolidation. A layout is composed of an external and an internal layout.
  * External layout is a grid that is used to cover any area with tiles.
  * TODO Internal layout defines the internal structure of a dataset
  *
  * Interlacing_pattern defines how to interlace the [R]ecords, the [B]ands, the [Z]ooms level/overview and the [T]iles (geotiff blocks).
  * The four levels of interlacing must be prioritized in the following way L1>L2>L3>L4 where each L is in [R, B, Z, T]. This order should be understood as:
  * for each L1:
  *   for each L2:
  *     for each L3:
  *       for each L4:
  *         addBlock(L1, L2, L3, L4)
  * In other words, all L4 for a given (L1, L2, L3) will be contiguous in memory.
  * For example:
  * - To optimize the access to geographical information of all the bands (such as in COG) : R>Z>T>B  => For a given record, zoom level and block, all the bands will be contiguous.
  * - To optimize the access to geographical information of one band at a time : B>R>Z>T => For a given band, record and zoom, all the blocks will be contiguous.
  * - To optimize the access to timeseries of all the bands (such as in MUCOG): Z>T>R>B => For a given zoom level and block, all the records will be contiguous.
  *
  * Interlacing pattern can be specialized to only select a list or a range for each level (except Tile level).
  * - By values: L=0,2,3 will only select the value 0, 2 and 3 of the level L. For example B=0,2,3 to select the corresponding band level.
  * - By range: L=0:3 will only select the values from 0 to 3 (not included) of the level L. For example B=0:3 to select the three firsts bands. 
  * First and last values of the range can be omitted to define 0 or last element of the level. e.g B=2: means all the bands from the second.
  * Z=0 is the full resolution, Z=1 is the overview with zoom factor 2, Z=2 is the zoom factor 4, and so on.
  * 
  * To chain interlacing patterns, use ";" separator.
  *
  * For example:
  * - MUCOG optimizes access to timeseries for full resolution (Z=0), but geographic for overviews (Z=1:). Z=0>T>R>B;Z=1:>R>T>B
  * - Same example, but the bands are separated: B>Z=0>T>R;B>Z=1:>R>T
  * - To optimize access to geographic information of the three first bands together, but timeseries of the others: Z>T>R>B=0:3;B=3:>Z>R>T

  */
message Layout{
    string              name            = 2;

    // External layout: Grid:Cell (CRS)
    repeated string     grid_flags      = 3;
    map<string, string> grid_parameters = 4;

    // Internal layout: Cell, Tile
    int64               block_x_size        = 5;
    int64               block_y_size        = 6;
    int64               max_records         = 7;
    int64               overviews_min_size  = 8; // Maximum width or height of the smallest overview level. 0: No overview, -1: default=256.
    string              interlacing_pattern = 9; // Define how to interlace the [R]ecords, the [B]ands, the [Z]ooms level/overview and the [T]iles (geotiff blocks). 
}

/**
  * Create a new layout
  * Return an error if the name already exists
  */
message CreateLayoutRequest{
    Layout layout = 1;
}

/**
  *
  */
message CreateLayoutResponse{
}

/**
  * Delete a layout by name
  */
message DeleteLayoutRequest{
    string name = 1;
}

/**
  *
  */
message DeleteLayoutResponse{
}

/**
  * List all the layouts given a name pattern
  */
message ListLayoutsRequest{
    string name_like = 1; // Name pattern (support * and ? for all or any characters and trailing (?i) for case-insensitiveness)
}

/**
  * Return a list of layouts
  */
message ListLayoutsResponse{
    repeated Layout layouts = 1;
}

/**
  * Find all the layouts used by the datasets on an AOI or a set of records
  * It can be used to tile the AOI with an optimal layout.
  */
message FindContainerLayoutsRequest{
  string instance_id = 1;
  oneof identifier{
    RecordIdList         records = 2; // List of record ids
    RecordFiltersWithAOI filters = 3; // Filters to select records
  }
}

/**
  * Stream the name of the layout and the associated containers
  */
message FindContainerLayoutsResponse{
  string          layout_name    = 1; // Name of the layout
  repeated string container_uris = 2; // List of containers having the layout
}

/**
  * Tile an AOI, covering it with cells defined by a grid.
  * In the future, it will be able to find the best tiling given the internal layout of datasets.
  */
message TileAOIRequest{
    AOI aoi = 1;
    oneof identifier{
      string  layout_name = 5; // Name of an existing layout
      Layout  layout      = 6; // User-defined layout
    }
}

/**
  * Return tiles, thousand by thousand.
  */
message TileAOIResponse{
    repeated Tile tiles = 1;
}

/**
  * Define a grid
  */
message Grid{
  string        name        = 1; // Unique name of the grid
  string        description = 2; // Description of the grid
  repeated Cell cells       = 3; // Cells of the grid
}

/**
  * Define a cell of a grid
  */
message Cell{
  string     id          = 1; // Cell identifier
  string     crs         = 2; // Coordinate reference system used in the cell
  LinearRing coordinates = 3; // Geographic coordinates
}

/**
  * Create a new grid.
  */
message CreateGridRequest{
  Grid grid = 1;
}

/**
  *
  */
message CreateGridResponse{
}

/**
  * Delete a grid
  */
  message DeleteGridRequest{
    string name = 1;
}

/**
  *
  */
message DeleteGridResponse{
}

/**
  * List all the grids given a name pattern (does not retrieve the cells)
  */
  message ListGridsRequest{
    string name_like = 1; // Name pattern (support * and ? for all or any characters and trailing (?i) for case-insensitiveness)
}

/**
  * Return a list of grids
  */
message ListGridsResponse{
  repeated Grid grids = 1;
}
