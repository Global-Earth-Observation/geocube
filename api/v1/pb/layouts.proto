syntax = "proto3";
package geocube;
option go_package = "./pb;geocube";

import "pb/records.proto";

/**
  * Define a size
  */
message Size {
    int32 width  = 1;
    int32 height = 2;
}

/**
  * GDAL GeoTransform
  */
message GeoTransform {
    double a = 1; // x offset
    double b = 2; // x resolution
    double c = 3;
    double d = 4; // y offset
    double e = 5;
    double f = 6; // y resolution
}

/**
  * Define a rectangular tile in a given coordinate system (CRS).
  */
message Tile{
    GeoTransform transform  = 1; // Transform to map from pixel coordinates to CRS
    Size         size_px    = 2; // Size of the tile in pixel
    string       crs        = 3; // Coordinate reference system
}

/**
  * Define a layout for consolidation. A layout is composed of an external and an internal layout.
  * External layout is a grid that is used to cover any area with tiles.
  * TODO Internal layout defines the internal structure of a dataset
  */
message Layout{
    string              name            = 2;

    // External layout: Grid:Cell (CRS)
    repeated string     grid_flags      = 3;
    map<string, string> grid_parameters = 4;

    // Internal layout: Cell, Tile
    int64               block_x_size    = 5;
    int64               block_y_size    = 6;
    int64               max_records     = 7;
}

/**
  * Create a new layout
  * Return an error if the name already exists
  */
message CreateLayoutRequest{
    Layout layout = 1;
}

/**
  *
  */
message CreateLayoutResponse{
}

/**
  * Delete a layout by name
  */
message DeleteLayoutRequest{
    string name = 1;
}

/**
  *
  */
message DeleteLayoutResponse{
}

/**
  * List all the layouts given a name pattern
  */
message ListLayoutsRequest{
    string name_like = 1; // Name pattern (support * and ? for all or any characters and trailing (?i) for case-insensitiveness)
}

/**
  * Return a list of layouts
  */
message ListLayoutsResponse{
    repeated Layout layouts = 1;
}

/**
  * Find all the layouts used by the datasets on an AOI or a set of records
  * It can be used to tile the AOI with an optimal layout.
  */
message FindContainerLayoutsRequest{
  string instance_id = 1;
  oneof identifier{
    RecordIdList         records = 2; // List of record ids
    RecordFiltersWithAOI filters = 3; // Filters to select records
  }
}

/**
  * Stream the name of the layout and the associated containers
  */
message FindContainerLayoutsResponse{
  string          layout_name    = 1; // Name of the layout
  repeated string container_uris = 2; // List of containers having the layout
}

/**
  * Tile an AOI, covering it with cells defined by a grid.
  * In the future, it will be able to find the best tiling given the internal layout of datasets.
  */
message TileAOIRequest{
    AOI aoi = 1;
    oneof identifier{
      string  layout_name = 5; // Name of an existing layout
      Layout  layout      = 6; // User-defined layout
    }
}

/**
  * Return tiles, thousand by thousand.
  */
message TileAOIResponse{
    repeated Tile tiles = 1;
}

/**
  * Define a grid
  */
message Grid{
  string        name        = 1; // Unique name of the grid
  string        description = 2; // Description of the grid
  repeated Cell cells       = 3; // Cells of the grid
}

/**
  * Define a cell of a grid
  */
message Cell{
  string     id          = 1; // Cell identifier
  string     crs         = 2; // Coordinate reference system used in the cell
  LinearRing coordinates = 3; // Geographic coordinates
}

/**
  * Create a new grid.
  */
message CreateGridRequest{
  Grid grid = 1;
}

/**
  *
  */
message CreateGridResponse{
}

/**
  * Delete a grid
  */
  message DeleteGridRequest{
    string name = 1;
}

/**
  *
  */
message DeleteGridResponse{
}

/**
  * List all the grids given a name pattern (does not retrieve the cells)
  */
  message ListGridsRequest{
    string name_like = 1; // Name pattern (support * and ? for all or any characters and trailing (?i) for case-insensitiveness)
}

/**
  * Return a list of grids
  */
message ListGridsResponse{
  repeated Grid grids = 1;
}
